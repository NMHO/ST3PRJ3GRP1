<?xml version="1.0" encoding="utf-8"?>
<topic id="49775b45-0cd8-4e2e-b590-dd3a1ec61634" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
        Projektet er dokumenteret ved hjælp af Sandcastle. Alle klasser, metoder og lag (namespace) beskrives heri.
      </para>
    </introduction>


    <section>
      <title>Beskrivelse af Blodtryks Applikationen</title>
      <content>
        <para>
          Applikationen er designet efter trelags-arkitektur-princippet (præsentation-, logik- og datalag),
          hvilket er nyttigt når implementeringen af de forskellige programfunktionaliteter skal finde sted.
          De tre lag holdes så vidt muligt adskilte, hvilket gør hele applikationen lettere at overskue og videreudvikle.

        </para>

        <para>
          <legacyBold>Præsentationslaget</legacyBold> er det øverste lag, som behandler modtagelse og præsentation af data forbrugeren af applikationen.
          <legacyBold>Logiklaget</legacyBold> er det midterste lag, som står for udvekslingen af datamellem præsentationslaget og datalaget.
          <legacyBold>Datalaget</legacyBold> er det nederste lag, her opbevares og håndteres data, som eventuelt læses fra fil eller database
          eller persisteres hertil. Kommunikationen mellem de tre lag foregår som metodekald,
          hvor en fælles DTO (Data Transfer Object) medsendes som parameter.
          Ved hjælp af DTO-objektet kan data simpelt hentes fra datalaget til logiklaget og til sidst til fremvisning i
          brugergrænsefladen af præsentationslaget, og ligeledes persistere data til fil gennem lagene ved brug af et DTO-objekt.
          Samlet set bliver applikationens programstruktur mere overskuelig for både interne udviklere i projektet,
          og andre med meget lidt eller ingen kendskab til projektet.

        </para>

        <para>

          Til persistering af data benyttes serialisering af applikationens interne dataformat til JSON-format,
          som skrives til en JSON-fil. Herved er datum presisteret som åben-standard-format, ogkan læses af eksterne systemer.
          Således er indsamlet blodtryksdata fra BTA’en (Blodtryksapplikation) ikke låst til et specifikt applikationssystem.

        </para>

        <para>
          For at digitalisere det blodtrykssignal, som kan måles på udgangen af hardwaresystemet, be-nyttes dataopsamlingsmodulet
          NI-DAQ6009. For at kunne benytte NI-DAQ6009, skal kommunikationsprotokollen for denne kendes. Ved at have installeret
          NI-DAQmx driveren på computeren,og bruge assembly referencerne NationalInstruments.Common og NationalInstruments.DAQmxi
          projektet, kan det inkluderede C# API bruges til at indlæse fra NI-DAQ6009 digitalisere blod-trykssignalet,
          så det kan benyttes i applikationen.
        </para>

        <para>
          <legacyBold>For yderligere information se vedlagte projektdokumentation</legacyBold>
        </para>
      </content>


    </section>

    <relatedTopics>
      <link xlink:href="d1a0e8c2-b80e-4702-ba24-e3823a346b0e" />
    </relatedTopics>
  </developerConceptualDocument>
</topic>
